HTML:
    -add script tags to the head of and html document with the 'defer' attribute. This ensures that the scripts are loaded
     at the same time as the html document, but isn't executed until after the html document is parsed
        -to explicitly load a script BEFORE html is parsed, use the async attribute. Note that this does NOT guarantee
         the order of script execution(so don't use with scripts that are dependent on other scripts)
        - defer and async won't have any effect with in-line scripts
Boolean Tricks:
    -using a double bang(!!) will convert any datatype into a true boolean,
    ie. (0 normally yields a 'falsy' value, but !!0 would actually convert it to 'false', just as !0 converts it to 'true)
    -can use the ||(or) operator to assign values to variables when you may be uncertain of whether a value you're
    assigning to the variable will be truthy (ie. a user input that may an empty string)
        -can use the &&(and) operator to do the opposite (assign a different value to a variable only if the first value
        is truthy, this makes the most sense when dealing with actual boolean values, rather than falsy / truthy ones.
        ie. (let isLoggedIn = true; variable = isLoggedIn && 'Max')
Labeled Statements:
    -you can label a statement in js so that you can refer to it letter. This is commonly used with loops, so that you can
    break out of a loop even if the break statement is being used somewhere other than the loop itself.
    ie. the code below will break the outer loop from the inner loop.
        labeledOuterLoop: for (const num of nums) {
            for (const letter of letters) {
                if (num == 0) {
                    break labeledOuterLoop
                }
            }
        }
Strict Mode:
    -add the string "use strict" at the beginning of any block (including the global scope) to enable Strict Mode
        -Strict Mode makes js less forgiving to help avoid unintended syntax errors (ie. if you forget to declare
        a variable with let or const, js will NOT automatically add var under the hood if strict mode is enabled)
Hoisting:
    -https://blog.bitsrc.io/hoisting-in-modern-javascript-let-const-and-var-b290405adfda
Functions:
    -js will automatically assign 'undefined' to parameters which are not passed to a function call as arguments.
    -if an argument with a value of undefined is passed to a function parameter which has a default value, the default
    value will be used instead
        -it is still a best practice to add parameters with default values last
    -the bind() method is available to functions that you want to pass as arguments (ie. callbacks) to other functions
    with pre-configured arguments themselves. Otherwise, you aren't normally able to provide the callback function with any
    arguments prior to it entering the body of the function in which it itself was passed as an argument. Also, this is super
    annoying to try and write because it sounds way more complex than it actually is..